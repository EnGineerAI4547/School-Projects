# -*- coding: utf-8 -*-
"""Intro_Neural_Net_A13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TwctO-F6iryWOfSLa8yJ-CS9TzLvZVsj
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import matplotlib.pyplot as plt

#define metrics
fpr, tpr,  = [24,36,44], [45,42,33]

#create ROC curve
plt.plot(fpr,tpr)
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()

# imports
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

# creates confusion matrix
y_true = [1,0,0,1,0,1,0,0,1,1]
y_pred = [1,0,0,1,1,1,0,0,1,1]
mat_con = (confusion_matrix(y_true, y_pred, labels=[0, 1]))

# Setting the attributes
fig, px = plt.subplots(figsize=(7.5, 7.5))
px.matshow(mat_con, cmap=plt.cm.YlOrRd, alpha=0.5)
for m in range(mat_con.shape[0]):
    for n in range(mat_con.shape[1]):
        px.text(x=m,y=n,s=mat_con[m, n], va='center', ha='center', size='xx-large')

# Sets the labels
plt.xlabel('Predictions', fontsize=16)
plt.ylabel('Actuals', fontsize=16)
plt.title('Confusion Matrix', fontsize=15)
plt.show()

import numpy as np
from google.colab import drive
drive.mount('/content/drive')


with open('/content/drive/My Drive/housing.header.txt', 'r') as f: 
    for line in f:
        print(line.split(",")[0]) 


import pandas as pd
import matplotlib.pyplot as plt

from numpy import loadtxt



#read text file into NumPy array

from google.colab import files
uploaded = files.upload()

import seaborn as sns

df= pd.read_csv('housing.header.txt')
features = ['Histogram Graph','Density Graph']

plt.figure(figsize=(20, 5))
plt.subplot(1, 2, 1)
plt.title(features[0])
plt.ylabel('Crim index')
sns.distplot(df['Crim'], hist=True, kde=False, bins=20, color = 'blue',hist_kws={'edgecolor':'black'})
plt.xlabel('Bins')
plt.subplot(1, 2, 2)
plt.title(features[1])
sns.distplot(df['Crim'], hist=False, kde=True, bins=20, color = 'blue',hist_kws={'edgecolor':'black'})
plt.xlabel("Bins")

df

# scatter plot, filtering out some points
df.filter = df[df['Crim']<=1 & (df['Rm']>=6)] # found house age greater than 60
print(df.filter.shape)
x=np.arange(df.filter.shape[0]) # generate x index



# head-2-head scatter plot. Draw multiple plots
plt.figure(figsize=(20, 5))
plt.subplot(1, 2, 1)
plt.scatter(x, df.filter['Crim'], marker='o')
plt.xlabel('Instances')
plt.ylabel('Crime Index')
plt.title("Crime Index Filtered",fontsize=15)
plt.subplot(1, 2, 2)
plt.scatter(x, df.filter['Rm'], marker='o')
plt.title("Room Index Filtered",fontsize=15)
plt.xlabel('Number of houses')
plt.ylabel('Number of rooms')

# # scatter plot, filtering out some points
# df.filter1 = df[df['Rm']>=7] # red
# df.filter2 = df[df['Rm']<=6] # black
# print(df.filter.shape)
# x=np.arange(df.filter1.shape[0]) # generate x index



target = df['Medv']






# Function to map the colors as a list from the input list of x variables
def pltcolor(lst):
    cols=[]
    for l in lst:
        if l>=7:
            cols.append('red')
        else:
            cols.append('black')
    return cols
# Create the colors list using the function above
cols=pltcolor(x)



x=df["Rm"]
y = target
plt.scatter(x, y, marker='o', color=cols)
plt.ylabel('Medv', fontsize=15)
plt.xlabel('Rm', fontsize=15)
plt.title("Rm vs Medv colored",fontsize=20)
plt.show()

plt.figure(figsize=(20, 5))

features = ['Crim','Rm','Age', 'Tax',"Zn",	"Indus","Chas",	"Nox", "Dis",	"Rad", "Ptratio",	"B",	"Lstat"]
target = df['Medv']

for i, col in enumerate(features):
    plt.subplot( 2, len(features) , i+1)
    x = df[col]
    y = target
    plt.scatter(x, y, marker='o')
    plt.title(col)
    plt.xlabel(col)
    plt.ylabel('House Values')

df.head()

y=df["Crim"]
print(y.shape[0]) # number of instances
x=np.arange(y.shape[0]) # generate x index

plt.scatter(x, y, marker='o')
plt.ylabel('Instances', fontsize=10)
plt.xlabel('Crim Index', fontsize=10)
plt.title("Crim Index",fontsize=15)
plt.show()

# create subsets
# a subset of the dataset with all rows but only two columns/features

subset = df[["Crim"]]
print(subset.shape)

subset.head

# importing libraries


fig, axs = plt.subplots(1, 2)
df.hist("Crim", color = 'blue', edgecolor='black',ax=axs[0])
axs[0].set_title('Axis [0, 0]')
df.density("Crim", 'tab:orange',ax=axs[0])
axs[1].set_title('Axis [0, 1]')
# df.hist("Crim", color = 'blue', edgecolor='black')
plt.show()

from google.colab import files
uploaded = files.upload()

df= pd.read_csv('review100.csv')

df

df.head()

for i in range(df.shape[0]):
  if df["sentiment"]=="positive":
    word_list = df["movie review"].split()

    number_of_words += len(word_list)

number_of_words